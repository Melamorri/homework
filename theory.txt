1. Какие сервисы предоставляет Firebase? Перечислите хотя бы 3.
    Управление пользователями, нотификации, хранение информации и файлов.

2. Какие способы аутенфикации доступны в Firebase?
    E-mail, номер телефона, аутентификация через соцсети.

3. Чем база данных Firebase отличается от базы данных objectbox?
    Objectbox хранит данные локально, тогда как Firebase сохраняет данные в облаке.

4. Какие сервисы предоставляет Firebase для хранения данных?
    Realtime database, Firebase Storage

Неделя 19:

## Контрольные вопросы:

1. Найдите, какие еще бывают платежные системы?
    Apple pay, google pay, paypal

2. Приведите 3 примера, где платежные системы могут использоваться?
    Онлайн магазины, CRM-системы, службы заказа такси

3. Для чего нужен **npm**?
    Для загрузки необходимых для проекта пакетов и модулей

4. Что такое **Firebase**?
    База данных, позволяющая хранить и использовать информацию в облаке.

5. С помощью какой библиотеки мы можем работать с платежной системой Stripe?
    flutter_stripe

6. Нужно ли для работы с платежными системами менять что-то в нативных файлах или можно обойтись только Flutter?
    Да, нативные файлы необходимо также отредактировать.

Неделя 22:

1. Для чего нужна архитектура?
       Мы отделяем функциональную часть кода, делая её независимой. Это упрощает чтение кода,
       особенно чужого, что повышает эффективность работы над проектом. Так же при таком подходе
       легче вносить изменения.

2. Какую задачу выполняет паттерн MVVM?
    Отделение UI от бизнес-логики.

3. Что делают аннотации `@observable` и `@action` в MobX?
     @observable отмечает данные, при изменении которых меняется Observer.
     @action отмечает функции, которые переписывают состояние.

4. Какие библиотеки могут помочь в реализации паттерна MVVM во Flutter?
    MobX, BLoC, Riverpod, GetX

Неделя 23:

1. Опишите своими словами, как вы поняли DI?
    Если объект зависит от другого объекта (или класса), мы можем настроить зависимости таким образом,
    чтобы не приходилось создавать данный объект, а можно было взять его извне.

2. С помощью каких аннотаций мы можем зарегистрировать класс в `injectable`?
    @injectable, @singleton, @lazySingleton;
3. Для чего нужен паттерн Singleton?
    С его помощью мы создаём объект только один раз и используем его в течение всей жизни проекта.

4. Какую команду нужно вызвать в `main()` для инициализации `injectable`?
    configureDependencies();