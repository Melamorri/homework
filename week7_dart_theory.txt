1. Чем отличается класс от объекта? Приведите примеры и того, и другого, отличные от указанных в уроке.
    Класс - некий набор свойств, а объект в свою очередь – его конкретный экземпляр.
    К примеру, смартфон - это класс, а конкретный Самсунг Гэлэкси 100500 будет его объектом.

2. Что такое конструктор? Что будет, если его не добавить в класс?
    С помощью конструктора мы инициализируем объект нашего класса, т.е. вызываем его при создании объекта.
    Если его не добавить, автоматически создаётся конструктор по умолчанию.

3. Чем статические свойства и методы отличаются от нестатических? В каких ситуациях они применяются?
    Статические свойства и методы относятся ко всему классу, а не к какому-то конкретному объекту.
    Они не затрагивают состояние класса.

4. Можно ли закрыть доступ к изменению значения поля класса извне?
    Можно в публичных и приватных.

5. Приведите примеры объектно-ориентированного подхода в реальной жизни.
    Горнодобывающая техника содержит в себе классы оборудования для открытых работ и подземных работ. Оборудование для подземных работ
    делится, к примеру, на погрузчики, самосвалы и буровые установки. Последние можно разделить по производителю, типу бурения и грузоподъёмности.

    Приведите примеры объектно-ориентированного подхода в программировании.
    Платформа для аренды автомобилей — марка автомобиля, коробка передач, стоимость аренды в день, максимальный пробег.

6. Для наследования одного класса от другого применяется какой оператор?
    - extends

7. Что будет выведено на консоль при выполнении следующей программы и почему?

```dart
void main (){
Employee bob = Employee('Bob');
bob.display();
}

class Person{
String name;
Person(this.name){
print('Создан пользователь $name');
}

void display(){
print('Name: $name');
}
}
class Employee extends Person{
}
```
    Ошибку, т.к. мы не указали, какие аргументы принимает конструктор Employee, но пытаемся передать аргумент при вызове.

8. Что будет выведено на консоль при выполнении следующей программы и почему?

```dart
void main (){
Employee bob = Employee('Bob');
bob.display();
}

class Person{
String name;
Person(this.name){
print('Создан пользователь $name');
}

void display(){
print('Name: $name');
}
}
class Employee extends Person{
Employee(String name){
this.name = name;
}
}
```
    Ошибку, т.к. мы забыли обратиться к функционалу базового класса с помощью ключевого слова super, при этом указав текущий экземпляр
    класса ранее.

9. Что будет выведено на консоль при выполнении следующей программы и почему?

```dart
void main (){
Employee bob = Employee('Bob');
bob.display();
}

class Person{
String? name;
void display(){
print('Name: $name');
}
}
class Employee extends Person{
Employee(String name){
this.name = name;
}
}
    Здесь всё верно, т.к. текущий экземпляр класса